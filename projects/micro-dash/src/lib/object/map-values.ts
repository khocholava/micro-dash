import { Nil, ObjectIteratee } from "../interfaces";
import { forOwnExceptArrayLength } from "./_keys-except-array-length";

type MappedObject<T, O> = { [key in keyof T]: O };
type MappedNullableObject<T, O> = { [key in keyof NonNullable<T>]: O } | {};
// tslint:disable-next-line:interface-over-type-literal
type MappedArray<O> = { [index: number]: O };
type MappedNullableArray<O> = MappedArray<O> | {};

/**
 * Creates an object with the same keys as `object` and values generated by running each own enumerable string keyed property of `object` thru `iteratee`.
 *
 * Contribution to minified bundle size, when it is the only function imported:
 * - Lodash: 14,299 bytes
 * - Micro-dash: 334 bytes
 */

export function mapValues<A extends any[] | Nil, O>(
  array: A,
  iteratee: (item: NonNullable<A>[number], index: number) => O,
): null extends A
  ? MappedNullableArray<O>
  : undefined extends A
  ? MappedNullableArray<O>
  : MappedArray<O>;

export function mapValues<T, O>(
  object: T,
  iteratee: ObjectIteratee<T, O>,
): null extends T
  ? MappedNullableObject<T, O>
  : undefined extends T
  ? MappedNullableObject<T, O>
  : MappedObject<T, O>;

export function mapValues(object: any, iteratee: Function) {
  const obj: any = {};
  forOwnExceptArrayLength(object, (value, key) => {
    obj[key] = iteratee(value, key);
  });
  return obj;
}
